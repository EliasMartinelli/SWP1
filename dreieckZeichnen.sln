using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace TestDrawProgramm
{
    public partial class Form1 : Form
    {

        float height, width, xLeft, xRight, yUp, yDown, edge;
        Graphics graphicField;
        Pen pencil, coordPen;
        Brush brush;
        PointF[] points;
        Color color, coordColor;

        private void init()
        {
            xLeft = -2;
            xRight = 8;
            yDown = -2;
            yUp = 8;
            edge = 0;
            graphicField = picBox.CreateGraphics();
            color = Color.FromArgb(120,200,0,100);
            coordColor = Color.FromArgb(50, 0, 0, 0);
            pencil = new Pen(color,2);
            coordPen = new Pen(coordColor,3);
            brush = new SolidBrush(Color.FromArgb(50,200,0,100));
            points = new PointF[3];
            height = picBox.ClientSize.Height;
            width = picBox.ClientSize.Width;
        }

        public Form1()
        {
            InitializeComponent();
            init();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            startDrawing();
        }

        private void startDrawing()
        {
            drawCoordSystem();
            drawForm();
        }


        private void drawForm()
        {
            points[0].X = xPicture(Convert.ToSingle(txtAX.Text));
            points[0].Y = yPicture(Convert.ToSingle(txtAY.Text));

            points[1].X = xPicture(Convert.ToSingle(txtBX.Text));
            points[1].Y = yPicture(Convert.ToSingle(txtBY.Text));

            points[2].X = xPicture(Convert.ToSingle(txtCX.Text));
            points[2].Y = yPicture(Convert.ToSingle(txtCY.Text));

            graphicField.DrawPolygon(pencil, points);
            graphicField.FillPolygon(brush, points);
        }

        private void drawCoordSystem()
        {
            graphicField.Clear(picBox.BackColor);

            graphicField.DrawLine(coordPen, xPicture(xLeft), yPicture(0), xPicture(xRight), yPicture(0));
            graphicField.DrawLine(coordPen, xPicture(0), yPicture(yDown), xPicture(0), yPicture(yUp));

            coordPen.Width = 2;

            for (int i = -3; i <= 8; i++)
            {
                graphicField.DrawLine(coordPen, xPicture(xLeft), yPicture(i), xPicture(xRight), yPicture(i));
                graphicField.DrawLine(coordPen, xPicture(i), yPicture(yDown), xPicture(i), yPicture(yUp));
            }
        }

        private float xPicture(float x)
        {
            float xPictureValue = (x - xLeft) * width / (xRight - xLeft) + edge;

            return xPictureValue;
        }

        private float yPicture(float y)
        {
            float yPictureValue = height - (y - yDown) * height / (yUp - yDown) + edge;

            return yPictureValue;
        }

        private float xPictureX(float xb)
        {
            float x = (((xb - edge) * (xRight - xLeft)) / width) + xLeft;
            
            return x;
        }

        private float yPictureY(float yb)
        {
            float y = ((edge + height - yb) * (yUp - yDown) / height) + yDown;

            return y;
        }

    }
}
